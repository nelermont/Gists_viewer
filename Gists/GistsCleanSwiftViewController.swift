//
//  GistsCleanSwiftViewController.swift
//  Gists
//
//  Created by Дмитрий Подольский on 05.05.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import Foundation
import UIKit

protocol DisplayLogic: AnyObject {
    func displayGists(_ gists: [GistsRoot])
}

class GistsCleanSwiftViewController: UIViewController {
  
    var interactor: GistsCleanSwiftInteractor?
    var router: GistsCleanSwiftRouter?
  
    private let tableView = UITableView()

    var gistsRoot = [GistsRoot]()

    override func viewDidLoad() {
        super.viewDidLoad()
    
        let backgroundView = UIView()
            backgroundView.backgroundColor = .white
            view.addSubview(backgroundView)
            backgroundView.translatesAutoresizingMaskIntoConstraints = false
            NSLayoutConstraint.activate([
                backgroundView.topAnchor.constraint(equalTo: view.topAnchor),
                backgroundView.bottomAnchor.constraint(equalTo: view.bottomAnchor),
                backgroundView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
                backgroundView.trailingAnchor.constraint(equalTo: view.trailingAnchor)
            ])
        
        configureTableView()
        fetchData()
    }

    private func configureTableView() {
        view.addSubview(tableView)
        tableView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            tableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            tableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    
        tableView.register(GistCell.self, forCellReuseIdentifier: "cell")
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    private func fetchData() {
        interactor?.fetchData()
    }
}

extension GistsCleanSwiftViewController: UITableViewDelegate, UITableViewDataSource {

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return gistsRoot.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! GistCell
        cell.configure(with: gistsRoot[indexPath.row])
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToGistDetail(with: gistsRoot[indexPath.row])
    }
}
extension GistsCleanSwiftViewController: DisplayLogic {
    func displayGists(_ gists: [GistsRoot]) {
        self.gistsRoot = gists
        tableView.reloadData()
    }
}
